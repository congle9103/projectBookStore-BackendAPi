import mongoose, { Schema, model } from "mongoose";
import { IProduct } from "../types/product.type";

const productSchema = new Schema<IProduct>(
  {
    product_name: {
      type: String,
      required: [true, "T√™n s·∫£n ph·∫©m l√† b·∫Øt bu·ªôc"],
      unique: true,
      trim: true,
      minlength: [2, "T√™n s·∫£n ph·∫©m qu√° ng·∫Øn"],
      maxlength: [255, "T√™n s·∫£n ph·∫©m t·ªëi ƒëa 255 k√Ω t·ª±"],
    },
    category_id: {
      type: Schema.Types.ObjectId,
      ref: "Category",
      required: true,
    },
    supplier: {
      type: String,
      required: true,
      trim: true,
      minlength: [2, "T√™n nh√† cung c·∫•p qu√° ng·∫Øn"],
      maxlength: [255, "T√™n nh√† cung c·∫•p t·ªëi ƒëa 255 k√Ω t·ª±"],
    },
    publisher: {
      type: String,
      required: true,
      trim: true,
      minlength: [2, "T√™n nh√† xu·∫•t b·∫£n qu√° ng·∫Øn"],
      maxlength: [255, "T√™n nh√† xu·∫•t b·∫£n t·ªëi ƒëa 255 k√Ω t·ª±"],
    },
    authors: {
      type: [String],
      required: true,
      validate: {
        validator: (arr: string[]) => arr.length > 0,
        message: "Ph·∫£i c√≥ √≠t nh·∫•t m·ªôt t√°c gi·∫£",
      },
    },

    // Th√¥ng tin s√°ch
    pages: { required: true, type: Number, min: 50, max: 3000 },
    publicationYear: {
      type: Number,
      min: [1900, "NƒÉm xu·∫•t b·∫£n qu√° c≈©"],
      max: [new Date().getFullYear(), "NƒÉm xu·∫•t b·∫£n kh√¥ng v∆∞·ª£t hi·ªán t·∫°i"],
    },
    format: {
      required: true,
      type: String,
      trim: true,
      enum: ["B√¨a m·ªÅm", "B√¨a c·ª©ng"],
    },
    dimensions: {
      required: true,
      type: String,
      trim: true,
      match: [/^[0-9]+x[0-9]+x[0-9]+(cm|mm)?$/, "ƒê·ªãnh d·∫°ng: r·ªôngxcaoxd√†y"],
    },
    weight: { required: true, type: Number, min: 100, max: 5000 },

    // Media
    thumbnail: {
      type: String,
      required: [true, "·∫¢nh s·∫£n ph·∫©m l√† b·∫Øt bu·ªôc"],
      validate: {
        validator: (url: string) => /^(http|https):\/\/[^ "]+$/.test(url),
        message: "Thumbnail ph·∫£i l√† URL h·ª£p l·ªá",
      },
    },

    // Gi√° & khuy·∫øn m√£i
    originalPrice: { type: Number, required: true, min: 0 },
    discountPercent: { type: Number, min: 0, max: 90 },
    price: { type: Number, min: 0 },
    voucher: { type: Schema.Types.ObjectId, ref: "Voucher" },

    // Qu·∫£n l√Ω t·ªìn kho
    stock: { type: Number, required: true, min: 0, default: 0 },

    // Marketing
    isNew: { type: Boolean, default: false },
    isPopular: { type: Boolean, default: false },
    isFlashSale: { type: Boolean, default: false },

    // M√¥ t·∫£
    description: { type: String, maxlength: 5000 },

    // SEO
    slug: {
      type: String,
      required: true,
      lowercase: true,
      trim: true,
      unique: true,
      match: [/^[a-z0-9]+(?:-[a-z0-9]+)*$/, "Slug ch·ªâ ch·ª©a ch·ªØ th∆∞·ªùng, s·ªë, g·∫°ch ngang"],
    },

    // Th·ªëng k√™
    ratingsAverage: { type: Number, min: 0, max: 5, default: 0 },
    ratingsQuantity: { type: Number, default: 0 },

    // üëâ Tham chi·∫øu Review (m·ªëi quan h·ªá nhi·ªÅu-nhi·ªÅu)
    reviews: [{ type: Schema.Types.ObjectId, ref: "Review" }],
  },
  {
    timestamps: true,
    versionKey: false,
  },
);

// Middleware: t·ª± ƒë·ªông t√≠nh price n·∫øu c√≥ discountPercent
productSchema.pre("save", function (this: IProduct, next) {
  if (this.originalPrice && this.discountPercent != null) {
    this.price = Math.round(
      this.originalPrice * (1 - this.discountPercent / 100)
    );
  }
  if (this.originalPrice && this.discountPercent == null) {
    this.price = this.originalPrice;
    this.discountPercent = 0;
  }
  next();
});

const Product = model("Product", productSchema);
export default Product;
